{"version":3,"sources":["store/Point/PointStore.ts","components/List/index.tsx","components/Form/index.tsx","components/Layout/index.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["createContext","pointList","createPoint","point","push","makeAutoObservable","this","observer","useContext","PointStore","map","key","value","coords","join","onSubmit","useState","search","setSearch","options","setOptions","reset","onSearch","query","a","length","api","fetch","then","res","json","results","variants","response","GeoObjectCollection","featureMember","v","GeoObject","metaDataProperty","GeocoderMetaData","text","Point","pos","split","Math","random","style","width","onSelect","newPoint","find","onChange","data","placeholder","allowClear","autoFocus","Layout","store","className","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"uMAqBeA,0BAAc,IAT3B,aAAe,IAAD,gCAFdC,UAAsB,GAER,KAIdC,YAAc,SAACC,GACb,EAAKF,UAAUG,KAAKD,IAJpBE,YAAmBC,QCMRC,eAfM,WACnB,IACQN,EADWO,qBAAWC,GACtBR,UAER,OACE,oCACGA,EAAUS,KAAI,gBAAGC,EAAH,EAAGA,IAAKC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,OAAf,OACb,yBAAKF,IAAKA,GACPC,EADH,KACYC,EAAOC,KAAK,MADxB,Y,0CCgDOP,eAlDiB,SAAC,GAA0B,IAAxBQ,EAAuB,EAAvBA,SAAuB,EAC5BC,mBAAS,IADmB,mBACjDC,EADiD,KACzCC,EADyC,OAE1BF,mBAAmB,IAFO,mBAEjDG,EAFiD,KAExCC,EAFwC,KAIlDC,EAAQ,WACZH,EAAU,IACVE,EAAW,KAGPE,EAAQ,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,yDACM,IAAjBD,EAAME,OADK,uBAEbJ,IAFa,uEAMXK,EANW,kEAMsDH,EANtD,oEAOOI,MAAMD,GAAKE,MAAK,SAACC,GAAD,OAASA,EAAIC,UAPpC,OAOTC,EAPS,OAQTC,EAAqBD,EAAQE,SAASC,oBAAoBC,cAAczB,KAC5E,SAAC0B,GAAD,MAAa,CACXxB,MAAOwB,EAAEC,UAAUC,iBAAiBC,iBAAiBC,KACrD3B,OAAQuB,EAAEC,UAAUI,MAAMC,IAAIC,MAAM,KACpChC,IAAKiC,KAAKC,aAGdzB,EAAWY,GAfI,4CAAH,sDA0Bd,OACE,kBAAC,IAAD,CACEpB,MAAOK,EACPE,QAASA,EACT2B,MAAO,CAAEC,MAAO,KAChBC,SAba,SAACpC,GAChB,IAAMqC,EAA+B9B,EAAQ+B,MAAK,SAACd,GAAD,OAAOA,EAAExB,QAAUA,KACrES,IACA4B,GAAYlC,GAAYA,EAASkC,IAW/B3B,SAAUA,EACV6B,SATa,SAACC,GAAD,OAAkBlC,EAAUkC,IAUzCC,YAAY,4EACZC,YAAU,EACVC,WAAS,OCnCAC,EAbA,WACb,IAAMC,EAAQjD,qBAAWC,GACzB,OACE,yBAAKiD,UAAU,UACb,yBAAKA,UAAU,iBACb,kBAAC,EAAD,CAAM3C,SAAU0C,EAAMvD,cACtB,kBAAC,EAAD,OAEF,yBAAKwD,UAAU,iBAAf,SCPSC,MAJf,WACE,OAAO,kBAAC,EAAD,OCQWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5C,MAAK,SAAA6C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.7039a101.chunk.js","sourcesContent":["import { makeAutoObservable } from \"mobx\";\r\nimport { createContext } from \"react\";\r\n\r\nexport interface IPoint {\r\n  value: string;\r\n  coords: number[];\r\n  key: number;\r\n}\r\n\r\nexport class PointStore {\r\n  pointList: IPoint[] = [];\r\n\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  createPoint = (point: IPoint) => {\r\n    this.pointList.push(point);\r\n  };\r\n}\r\n\r\nexport default createContext(new PointStore());\r\n","import React, { FC, useContext } from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport PointStore from \"../../store/Point/PointStore\";\r\n\r\nconst List: FC<{}> = () => {\r\n  const pointStore = useContext(PointStore);\r\n  const { pointList } = pointStore;\r\n\r\n  return (\r\n    <>\r\n      {pointList.map(({ key, value, coords }) => (\r\n        <div key={key}>\r\n          {value} [{coords.join(\", \")}]\r\n        </div>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default observer(List);\r\n","import React, { FC, useState } from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport { IPoint } from \"../../store/Point/PointStore\";\r\nimport { AutoComplete } from \"antd\";\r\n\r\ninterface IProps {\r\n  onSubmit?: (point: IPoint) => void;\r\n}\r\n\r\nexport const Form: FC<IProps> = ({ onSubmit }: IProps) => {\r\n  const [search, setSearch] = useState(\"\");\r\n  const [options, setOptions] = useState<IPoint[]>([]);\r\n\r\n  const reset = () => {\r\n    setSearch(\"\");\r\n    setOptions([]);\r\n  };\r\n\r\n  const onSearch = async (query: string) => {\r\n    if (query.length === 0) {\r\n      reset();\r\n      return;\r\n    }\r\n    let apikey = `7102a877-527d-4ae8-a6a0-c76304fba8e5`;\r\n    let api = `https://geocode-maps.yandex.ru/1.x/?format=json&geocode=${query}&apikey=${apikey}`;\r\n    const results = await fetch(api).then((res) => res.json());\r\n    const variants: IPoint[] = results.response.GeoObjectCollection.featureMember.map(\r\n      (v: any) => ({\r\n        value: v.GeoObject.metaDataProperty.GeocoderMetaData.text,\r\n        coords: v.GeoObject.Point.pos.split(\" \"),\r\n        key: Math.random(),\r\n      })\r\n    );\r\n    setOptions(variants);\r\n  };\r\n\r\n  const onSelect = (value: string) => {\r\n    const newPoint: IPoint | undefined = options.find((v) => v.value === value);\r\n    reset();\r\n    newPoint && onSubmit && onSubmit(newPoint);\r\n  };\r\n\r\n  const onChange = (data: string) => setSearch(data);\r\n\r\n  return (\r\n    <AutoComplete\r\n      value={search}\r\n      options={options}\r\n      style={{ width: 200 }}\r\n      onSelect={onSelect}\r\n      onSearch={onSearch}\r\n      onChange={onChange}\r\n      placeholder=\"Введите адрес\"\r\n      allowClear\r\n      autoFocus\r\n    />\r\n  );\r\n};\r\n\r\nexport default observer(Form);\r\n","import React, { useContext } from \"react\";\r\nimport \"./style.css\";\r\nimport List from \"../List\";\r\nimport Form from \"../Form\";\r\nimport PointStore from \"../../store/Point/PointStore\";\r\n\r\nconst Layout = () => {\r\n  const store = useContext(PointStore);\r\n  return (\r\n    <div className=\"layout\">\r\n      <div className=\"layout__panel\">\r\n        <Form onSubmit={store.createPoint} />\r\n        <List />\r\n      </div>\r\n      <div className=\"layout__panel\">Map</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n","import React from \"react\";\nimport Layout from \"./components/Layout\";\n\nfunction App() {\n  return <Layout />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport 'antd/dist/antd.css'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}