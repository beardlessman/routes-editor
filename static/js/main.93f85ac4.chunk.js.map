{"version":3,"sources":["store/Point/PointStore.ts","components/List/DraggableInternal.tsx","components/List/index.tsx","components/NewPointForm/index.tsx","components/Map/index.tsx","components/Layout/index.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["createContext","pointList","currentPointCenter","setCurrentPointCenter","newCenter","createPoint","name","push","value","coords","key","Math","random","dragItem","startIndex","endIndex","list","splice","removed","getVariants","query","a","api","fetch","then","res","json","results","response","GeoObjectCollection","featureMember","map","v","GeoObject","metaDataProperty","GeocoderMetaData","text","Point","pos","split","reverse","i","parseFloat","makeAutoObservable","this","DraggableInternal","observer","props","provided","items","ref","innerRef","className","index","draggableId","toString","draggableProps","dragHandleProps","placeholder","React","pointStore","useContext","PointStore","onDragEnd","result","destination","source","droppableId","NewPointForm","onSubmit","Form","useForm","form","onFinish","values","resetFields","Item","initialCenter","useEffect","defaultState","center","zoom","style","width","height","onBoundsChange","e","get","getCenter","options","float","geometry","properties","balloonContent","modules","Layout","store","Map","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.93f85ac4.chunk.js","sourcesContent":["import { makeAutoObservable } from \"mobx\";\r\nimport { createContext } from \"react\";\r\n\r\nexport interface IPoint {\r\n  value: string;\r\n  coords: number[];\r\n  key: number;\r\n}\r\n\r\nexport class PointStore {\r\n  pointList: IPoint[] = [];\r\n  currentPointCenter: number[] = [];\r\n\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  setCurrentPointCenter = (newCenter: number[]) => {\r\n    this.currentPointCenter = newCenter;\r\n  };\r\n\r\n  createPoint = (name: string) => {\r\n    this.pointList.push({\r\n      value: name,\r\n      coords: this.currentPointCenter,\r\n      key: Math.random(),\r\n    });\r\n  };\r\n\r\n  dragItem = (startIndex: number, endIndex: number): void => {\r\n    const list = [...this.pointList];\r\n    const [removed] = list.splice(startIndex, 1);\r\n    list.splice(endIndex, 0, removed);\r\n    this.pointList = list;\r\n  }\r\n\r\n  getVariants = async (query: string): Promise<IPoint[]> => {\r\n    let apikey = `7102a877-527d-4ae8-a6a0-c76304fba8e5`;\r\n    let api = `https://geocode-maps.yandex.ru/1.x/?format=json&geocode=${query}&apikey=${apikey}`;\r\n    const results = await fetch(api).then((res) => res.json());\r\n    return results.response.GeoObjectCollection.featureMember.map((v: any) => ({\r\n      value: v.GeoObject.metaDataProperty.GeocoderMetaData.text,\r\n      coords: v.GeoObject.Point.pos\r\n        .split(\" \")\r\n        .reverse()\r\n        .map((i: string) => parseFloat(i)),\r\n      key: Math.random(),\r\n    }));\r\n  };\r\n}\r\n\r\nexport default createContext(new PointStore());\r\n","import * as React from \"react\";\nimport { Draggable, DroppableProvided } from \"react-beautiful-dnd\";\nimport { observer } from \"mobx-react\";\nimport { IPoint } from \"../../store/Point/PointStore\";\n\ninterface IProps {\n  items: IPoint[];\n  provided: DroppableProvided;\n}\n\n@observer\nexport default class DraggableInternal extends React.Component<IProps> {\n  render() {\n    const { provided, items } = this.props;\n    return (\n      <div ref={provided.innerRef} className=\"drop-point\">\n        {items.map(({ key, value }, index) => (\n          <Draggable key={key} draggableId={key.toString()} index={index}>\n            {(provided) => (\n              <div>\n                <div\n                  ref={provided.innerRef}\n                  {...provided.draggableProps}\n                  {...provided.dragHandleProps}\n                  className=\"item\"\n                >\n                  {value}\n                </div>\n              </div>\n            )}\n          </Draggable>\n        ))}\n        {provided.placeholder}\n      </div>\n    );\n  }\n}\n","import React, { FC, useContext } from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport PointStore from \"../../store/Point/PointStore\";\r\nimport { DragDropContext, Droppable, DropResult } from \"react-beautiful-dnd\";\r\nimport DraggableInternal from \"./DraggableInternal\";\r\n\r\nconst List: FC<{}> = () => {\r\n  const pointStore = useContext(PointStore);\r\n  const { pointList, dragItem } = pointStore;\r\n\r\n  const onDragEnd = (result: DropResult): void => {\r\n    if (!result.destination) {\r\n      return;\r\n    }\r\n\r\n    dragItem(result.source.index, result.destination.index);\r\n  };\r\n\r\n  return (\r\n    <DragDropContext onDragEnd={onDragEnd}>\r\n      <Droppable droppableId=\"pointList\">\r\n        {(provided) => (\r\n          <DraggableInternal items={pointList} provided={provided} />\r\n        )}\r\n      </Droppable>\r\n    </DragDropContext>\r\n  );\r\n};\r\n\r\nexport default observer(List);\r\n","import React, { FC } from \"react\";\r\nimport { Form, Input } from \"antd\";\r\n\r\ninterface IProps {\r\n  onSubmit: (name: string) => void;\r\n}\r\n\r\nexport const NewPointForm: FC<IProps> = ({ onSubmit }: IProps) => {\r\n  const [form] = Form.useForm();\r\n\r\n  const onFinish = (values: { name: string }): void => {\r\n    onSubmit(values.name);\r\n    form.resetFields();\r\n  };\r\n\r\n  return (\r\n    <Form form={form} name=\"new-point-form\" onFinish={onFinish}>\r\n      <Form.Item name=\"name\">\r\n        <Input />\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default NewPointForm;\r\n","import React, { FC, useContext, useEffect } from \"react\";\r\nimport {\r\n  YMaps,\r\n  Map,\r\n  Clusterer,\r\n  Placemark,\r\n  ZoomControl,\r\n} from \"react-yandex-maps\";\r\nimport { observer } from \"mobx-react\";\r\nimport PointStore from \"../../store/Point/PointStore\";\r\n\r\nconst PointsMap: FC = () => {\r\n  const pointStore = useContext(PointStore);\r\n  const { pointList } = pointStore;\r\n\r\n  const initialCenter = [0, 0];\r\n\r\n  useEffect(() => {\r\n    pointStore.setCurrentPointCenter(initialCenter);\r\n  });\r\n\r\n  const onBoundsChange = (e: any) => {\r\n    pointStore.setCurrentPointCenter(e.get(\"target\").getCenter());\r\n  };\r\n\r\n  return (\r\n    <YMaps>\r\n      <Map\r\n        defaultState={{ center: initialCenter, zoom: 2 }}\r\n        style={{ width: \"100%\", height: \"100%\" }}\r\n        onBoundsChange={onBoundsChange}\r\n      >\r\n        <ZoomControl options={{ float: \"right\" }} />\r\n        <Clusterer>\r\n          {pointList.map(({ coords, key, value }, index) => (\r\n            <Placemark\r\n              key={key}\r\n              geometry={coords}\r\n              properties={{\r\n                balloonContent: `${index}) ${value}`,\r\n              }}\r\n              modules={[\"geoObject.addon.balloon\", \"geoObject.addon.hint\"]}\r\n            />\r\n          ))}\r\n        </Clusterer>\r\n      </Map>\r\n    </YMaps>\r\n  );\r\n};\r\n\r\nexport default observer(PointsMap);\r\n","import React, { useContext } from \"react\";\r\nimport \"./style.css\";\r\nimport List from \"../List\";\r\nimport NewPointForm from \"../NewPointForm\";\r\nimport PointStore from \"../../store/Point/PointStore\";\r\nimport Map from \"../Map\";\r\n\r\nconst Layout = () => {\r\n  const store = useContext(PointStore);\r\n  return (\r\n    <div className=\"layout\">\r\n      <div className=\"layout__panel\">\r\n        <NewPointForm onSubmit={store.createPoint} />\r\n        <List />\r\n      </div>\r\n      <div className=\"layout__panel\">\r\n        <Map />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n","import React from \"react\";\nimport Layout from \"./components/Layout\";\n\nfunction App() {\n  return <Layout />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport 'antd/dist/antd.css'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}